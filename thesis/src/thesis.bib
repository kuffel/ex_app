@article{Alt2017,
	abstract = {DevOps is a young concept, which is based on agile approaches and links the development of IT solutions, which are often innovative in nature, with their operation. Since DevOps is rather a philosophy than an elaborated method, each company is required to develop an individual adaptation until standardized process models, templates and comprehensive tools become available. The case of the T‑Systems MMS illustrates that although many existing development tools may be used for DevOps, the DevOps approach reaches beyond a tool-driven automation. As a result, DevOps needs to be conceived as a new means for increasing agility and innovation orientation of IT management.},
	author = {Alt, Rainer and Auth, Gunnar and K{\"o}gler, Christoph},
	doi = {10.1365/s40702-017-0300-y},
	file = {/home/adam.kuffel/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Alt, Auth, K{\"{o}}gler - 2017 - Innovationsorientiertes IT-Management -- Eine Fallstudie zur DevOps-Umsetzung bei T‑Systems MMSInnovati.pdf},
	issn = {1436-3011},
	journal = {HMD Praxis der Wirtschaftsinformatik},
	month = {apr},
	number = {2},
	pages = {216--229},
	publisher = {Springer Fachmedien Wiesbaden GmbH},
	title = {{Innovationsorientiertes IT-Management -- Eine Fallstudie zur DevOps-Umsetzung bei T‑Systems MMSInnovation-Oriented IT-Management -- A Case for Implementing DevOps at T-Systems MMS}},
	volume = {54},
	year = {2017}
}

@inproceedings{Abbass2019,
	abstract = {Continuous Integration is the practice of merging small code changes frequently rather than merging large number changes at the end of a development cycle. In addition, after each integration, the system should be re-built and re-tested to ensure that the system is still working after each change, and it's safe to build on top of it. Continuous delivery is software practice in which the software can be deployed to the market at any given time. Developing continuous integration and continuous delivery platform will solve a lot of problems in old agile methods such as increases time to find and fix bugs as testing process late, deploying software that has not been fully tested and shared testing resources which cases delivery delays, when multiple projects are ready for testing one project get tested and others are queued waiting for the testing resource to be released. Also continuous delivery guides development organization to build valuable software and to increase the number of releases. With all this benefits there are some problem obstructing companies from moving to the new platform, some of them are human factors such as human resistant to changes and other are technical such as moving to new platform require learning new tools and training. To help overcome these problems we need to develop simple platform which is more usable and easy to learn. Also some problems happen when applying CI/CD some of them related to testing and others related to integration. Testing problem are: ambiguous test result which is test results that doesn't guided the developers to finds bugs, which increases time to find and fix it; time consuming tests which require developers to waiting large amount of time for testing reports after each small changes, this waiting cause the developers to practice large commit (merging large number of changes) which slows the integration process. Slow integration mean large number of conflict lines, now instead of doing productive process developers wasting time to solve this conflicts. To overcome these problem we introduce a new way to configuring tests. As you see solving time consumes test will solve integrations problems. To reduce testing time we need to organize the test in such way that tests are more appointed and targeted to changed code only. This method enforces a concept called micro-pipeline. A micro-pipeline is group of testing blocks, each block is responsible for specific type of test for specific unit of code, connected together in such a way that passing the block tests triggers the next test block in series. When integration happen the developer specify test block which is responsible for testing made changes only. The idea behind micro-pipeline is to test affected part only.},
	author = {Abbass, Moutaman Kamal Aldeen and Osman, Rahama Ibrahim Elyass and Mohammed, Abubaker Motasem Hmad and Alshaikh, Mohannad Waheed Ahmed},
	booktitle = {Proceedings of the International Conference on Computer, Control, Electrical, and Electronics Engineering 2019, ICCCEEE 2019},
	doi = {10.1109/ICCCEEE46830.2019.9070849},
	file = {/home/adam.kuffel/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Kamal et al. - Unknown - Adopting Continuous Integeration and Continuous Delivery for Small Teams.pdf},
	isbn = {9781728110066},
	keywords = {Continuous Delivery, Continuous Integration, DevOps},
	title = {{Adopting continuous integeration and continuous delivery for small teams}},
	year = {2019}
}

@inproceedings{Armenise2015,
	abstract = {This paper illustrates how Jenkins evolved from being a pure Continuous Integration Platform to a Continuous Delivery one, embracing the new design tendency where not only the build but also the release and the delivery process of the product is automated. In this scenario Jenkins becomes the orchestrator tool for all the teams/roles involved in the software lifecycle, thanks to which Development, Quality {\&} Assurance and Operations teams can work closely together. Goal of this paper is not only to position Jenkins as hub for CD, but also introduce the challenges that still need to be solved in order to strengthen Jenkins' tracking capabilities.},
	author = {Armenise, Valentina},
	booktitle = {Proceedings - 3rd International Workshop on Release Engineering, RELENG 2015},
	doi = {10.1109/RELENG.2015.19},
	file = {/home/adam.kuffel/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Armenise - 2015 - Continuous delivery with Jenkins Jenkins solutions to implement continuous delivery.pdf},
	isbn = {9781479919345},
	pages = {24--27},
	publisher = {Institute of Electrical and Electronics Engineers Inc.},
	title = {{Continuous delivery with Jenkins: Jenkins solutions to implement continuous delivery}},
	year = {2015}
}

@inproceedings{Dua2014,
	abstract = {PaaS vendors face challenges in efficiently providing services with the growth of their offerings. In this paper, we explore how PaaS vendors are using containers as a means of hosting Apps. The paper starts with a discussion of PaaS Use case and the current adoption of Container based PaaS architectures with the existing vendors. We explore various container implementations - Linux Containers, Docker, Warden Container, lmctfy and OpenVZ. We look at how each of this implementation handle Process, FileSystem and Namespace isolation. We look at some of the unique features of each container and how some of them reuse base Linux Container implementation or differ from it. We also explore how IaaSlayer itself has started providing support for container lifecycle management along with Virtual Machines. In the end, we look at factors affecting container implementation choices and some of the features missing from the existing implementations for the next generation PaaS},
	author = {Dua, Rajdeep and Raja, A. Reddy and Kakadia, Dharmesh},
	booktitle = {Proceedings - 2014 IEEE International Conference on Cloud Engineering, IC2E 2014},
	doi = {10.1109/IC2E.2014.41},
	file = {/home/adam.kuffel/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Dua, Raja, Kakadia - 2014 - Virtualization vs containerization to support PaaS.pdf},
	isbn = {9781479937660},
	keywords = {container, paas, virtualization},
	month = {sep},
	pages = {610--614},
	publisher = {Institute of Electrical and Electronics Engineers Inc.},
	title = {{Virtualization vs containerization to support PaaS}},
	year = {2014}
}

@book{Kim2018,
	abstract = {Increase profitability, elevate work culture, and exceed productivity goals through DevOps practices.More than ever, the effective management of technology is critical for business competitiveness. For decades, technology leaders have struggled to balance agility, reliability, and security. The consequences of failure have never been greater?whether it's the healthcare.gov debacle, cardholder data breaches, or missing the boat with Big Data in the cloud.And yet, high performers using DevOps principles, such as Google, Amazon, Facebook, Etsy, and Netflix, are routinely and reliably deploying code into production hundreds, or even thousands, of times per day.Following in the footsteps of The Phoenix Project, The DevOps Handbook shows leaders how to replicate these incredible outcomes, by showing how to integrate Product Management, Development, QA, IT Operations, and Information Security to elevate your company and win in the marketplace.},
	address = {Portland, OR 97210},
	author = {Kim, Gene and Humble, Jez and Debois, Patrick and Willis, John},
	edition = {First Edit},
	isbn = {978-1942788003},
	pages = {437},
	publisher = {IT Revoultion Press, LLC},
	title = {{The DevOps Handbook: How to Create World-Class Agility, Reliability, and Security in technology oKim, G., Humble, J., Debois, P., {\&} Willis, J. (2018). The DevOps Handbook: How to Create World-Class Agility, Reliability, and Security in technology organiza}},
	year = {2018}
}

@article{Lichtenberger2017,
	abstract = {DevOps ist weit mehr als nur Continuous Delivery und Automatisierung. DevOps sollte auch nie das Ziel sein, sondern Mittel zum Zweck. Daher ist es unerl{\"a}sslich, sich in einem ersten Schritt {\"u}ber das eigene {\glqq}Warum DevOps?`` im Klaren zu werden, eine Vision zu entwickeln und in messbare Ziele umzum{\"u}nzen. IT-Abteilungen m{\"u}ssen umdenken, weg von der funktionalen Trennung zwischen Entwicklung und Betrieb, hin zu interdisziplin{\"a}ren Teams mit einer gemeinsamen Wersch{\"o}pfungskette, gemeinsamen Zielen und Anreizen. Vom Ursprung her ist DevOps tief in der agilen Philosophie verwurzelt, f{\"u}r viele IT-Bereiche stellt die Adaption des agilen Mindsets eine kulturelle Herausforderung dar. Wer diese H{\"u}rde nicht meistert, scheitert in der DevOps-Transformation, denn {\glqq}Culture eats Strategy for Breakfast``. Der vorliegende Artikel beleuchtet diese und andere kritische Erfolgsfaktoren f{\"u}r eine DevOps-Transformation. Die Basis bilden Beobachtungen aus verschiedenen Projekten und die Erkenntnis, das auch bei DevOps nicht die Technik im Zentrum steht, sondern der Mensch.},
	author = {Lichtenberger, Alex},
	doi = {10.1365/s40702-017-0293-6},
	file = {/home/adam.kuffel/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Lichtenberger - 2017 - F{\"{u}}nf kritische Erfolgsfaktoren f{\"{u}}r eine erfolgreiche DevOps TransformationFive Critical DevOps Success Factors.pdf},
	issn = {1436-3011},
	journal = {HMD Praxis der Wirtschaftsinformatik},
	month = {apr},
	number = {2},
	pages = {244--250},
	publisher = {Springer Fachmedien Wiesbaden GmbH},
	title = {{F{\"u}nf kritische Erfolgsfaktoren f{\"u}r eine erfolgreiche DevOps TransformationFive Critical DevOps Success Factors}},
	volume = {54},
	year = {2017}
}

@article{Pahl2015,
	abstract = {Containerization is widely discussed as a lightweight virtualization solution. Apart from exhibiting benefits over traditional virtual machines in the cloud, containers are especially relevant for platform-as-a-service (PaaS) clouds to manage and orchestrate applications through containers as an application packaging mechanism. This article discusses the requirements that arise from having to facilitate applications through distributed multicloud platforms.},
	author = {Pahl, Claus},
	doi = {10.1109/MCC.2015.51},
	file = {/home/adam.kuffel/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Pahl - 2015 - Containerization and the PaaS Cloud.pdf},
	issn = {23256095},
	journal = {IEEE Cloud Computing},
	keywords = {Docker, Kubernetes, PaaS, cloud, cloud computing, cluster, container, multicloud, virtualization},
	number = {3},
	pages = {24--31},
	title = {{Containerization and the PaaS Cloud}},
	volume = {2},
	year = {2015}
}

@inproceedings{Rahman2018c,
	abstract = {Defects in infrastructure as code (IaC) scripts can have serious consequences for organizations who adopt DevOps. By identifying which characteristics of IaC scripts correlate with defects, we can identify anti-patterns, and help software practitioners make informed decisions on better development and maintenance of IaC scripts, and increase quality of IaC scripts. The goal of this paper is to help practitioners increase the quality of IaC scripts by identifying characteristics of IaC scripts and IaC development process that correlate with defects, and violate security and privacy objectives. We focus on characteristics of IaC scripts and IaC development that (i) correlate with IaC defects, and (ii) violate security and privacy-related objectives namely, confidentiality, availability, and integrity. For our initial studies, we mined open source version control systems from three organizations: Mozilla, Openstack, and Wikimedia, to identify the defect-related characteristics and conduct our case studies. From our empirical analysis, we identify (i) 14 IaC code and four churn characteristics that correlate with defects; and (ii) 12 process characteristics such as, frequency of changes, and ownership of IaC scripts that correlate with defects. We propose the following studies: (i) identify structural characteristics that correlate with defects; (ii) with respect to prediction performance, compare which characteristics of IaC scripts are more correlated with defects; and (iii) identify characteristics that violate security and privacy objectives.},
	author = {Rahman, Akond},
	booktitle = {Proceedings - International Conference on Software Engineering},
	doi = {10.1145/3183440.3183452},
	file = {/home/adam.kuffel/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Rahman - 2018 - Characteristics of defective infrastructure as code scripts in DevOps.pdf},
	isbn = {9781450356633},
	issn = {02705257},
	keywords = {Defects, Devops, Infrastructure as code, Metrics},
	month = {may},
	pages = {476--479},
	publisher = {IEEE Computer Society},
	title = {{Characteristics of defective infrastructure as code scripts in DevOps}},
	year = {2018}
}

@inproceedings{Rahman2018b,
	abstract = {In DevOps, infrastructure as code (IaC) scripts are used by practitioners to create and manage an automated deployment pipeline that enables IT organizations to release their software changes rapidly at scale. Low quality IaC scripts can have serious consequences, potentially leading to wide-spread system outages and service discrepancies. The goal of this research is to help practitioners increase the quality of infrastructure as code (IaC) scripts by identifying anti-patterns in IaC scripts and development of IaC scripts. Using open source repositories, we conduct three initial studies to (i) quantify the frequency and categorize the defects in IaC scripts; and (ii) identify operations that characterize defective IaC scripts. Based on our empirical analysis we observe (i) the dominant defect defect categories to be related to syntax and configuration assignments, and (ii) three operations that characterize defective IaC scripts. The above-mentioned findings motivate us to identify anti-patterns in IaC scripts and IaC development. To this end, we propose three studies that identify (i) process anti-patterns; and (ii) security-related anti-patterns in IaC.},
	author = {Rahman, Akond},
	booktitle = {Proceedings - 2018 IEEE 11th International Conference on Software Testing, Verification and Validation, ICST 2018},
	doi = {10.1109/ICST.2018.00057},
	file = {/home/adam.kuffel/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Rahman - 2018 - Anti-Patterns in Infrastructure as Code.pdf},
	isbn = {9781538650127},
	keywords = {anti pattern, configuration as code, continuous deployment, defect, devops, infrastructure as code, puppet},
	month = {may},
	pages = {434--435},
	publisher = {Institute of Electrical and Electronics Engineers Inc.},
	title = {{Anti-Patterns in Infrastructure as Code}},
	year = {2018}
}

@article{Rahman2018,
	abstract = {Infrastructure as code (IaC) scripts are used to automate the maintenance and configuration of software development and deployment infrastructure. IaC scripts can be complex in nature, containing hundreds of lines of code, leading to defects that can be difficult to debug, and lead to wide-scale system discrepancies such as service outages at scale. Use of IaC scripts is getting increasingly popular, yet the nature of defects that occur in these scripts have not been systematically categorized. A systematic categorization of defects can inform practitioners about process improvement opportunities to mitigate defects in IaC scripts. The goal of this paper is to help software practitioners improve their development process of infrastructure as code (IaC) scripts by categorizing the defect categories in IaC scripts based upon a qualitative analysis of commit messages and issue report descriptions. We mine open source version control systems collected from four organizations namely, Mirantis, Mozilla, Openstack, and Wikimedia Commons to conduct our research study. We use 1021, 3074, 7808, and 972 commits that map to 165, 580, 1383, and 296 IaC scripts, respectively, collected from Mirantis, Mozilla, Openstack, and Wikimedia Commons. With 89 raters we apply the defect type attribute of the orthogonal defect classification (ODC) methodology to categorize the defects. We also review prior literature that have used ODC to categorize defects, and compare the defect category distribution of IaC scripts with 26 non-IaC software systems. Respectively, for Mirantis, Mozilla, Openstack, and Wikimedia Commons, we observe (i) 49.3{\%}, 36.5{\%}, 57.6{\%}, and 62.7{\%} of the IaC defects to contain syntax and configuration-related defects; (ii) syntax and configuration-related defects are more prevalent amongst IaC scripts compared to that of previously-studied non-IaC software.},
	archiveprefix = {arXiv},
	arxivid = {1809.07937},
	author = {Rahman, Akond and Elder, Sarah and Shezan, Faysal Hossain and Frost, Vanessa and Stallings, Jonathan and Williams, Laurie},
	eprint = {1809.07937},
	file = {/home/adam.kuffel/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Rahman et al. - Unknown - Categorizing Defects in Infrastructure as Code.pdf},
	title = {{Categorizing Defects in Infrastructure as Code}},
	url = {https://www.stickyminds.com/sites/default/files/presentation/file/2013/t12.pdf http://arxiv.org/abs/1809.07937},
	year = {2018}
}

@article{Samulat2017,
	abstract = {Ein stabiler und risikoarmer Betrieb gesch{\"a}ftskritischer Produktionssysteme trotz hoher {\"A}nderungsh{\"a}ufigkeit? Das kann nur gelingen, wenn die Mauern der Silos zwischen Entwicklung und (Infrastruktur-) Betrieb fallen, verbunden mit einem hohen, industriellen Automatisierungsgrad auf Basis elastischer Plattformen. Technische Voraussetzung sind vollst{\"a}ndig automatisierte Interaktionen der Entwicklerwerkzeuge (Jenkins, Chef, {\ldots}) mit einer Infrastruktur, die die ben{\"o}tigten Entwicklungs-, Test und Produktionssysteme dynamisch zur Verf{\"u}gung stellt. In diesem Artikel werden mit dem F{\"u}hrungs- und Organisationskonzept {\glqq}Plattform Lean-IT`` technische und organisatorische Rahmenbedingungen vorgestellt. Dabei steht der Mensch im Mittelpunkt: insbesondere die daf{\"u}r ben{\"o}tigte Produktfokussierung und Skillsets -- auch die der F{\"u}hrungskr{\"a}fte.},
	author = {Samulat, Peter},
	doi = {10.1365/s40702-017-0295-4},
	file = {/home/adam.kuffel/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Samulat - 2017 - Raus aus den Silos -- mit DevOps zum Lean Manufacturing.pdf},
	issn = {1436-3011},
	journal = {HMD Praxis der Wirtschaftsinformatik},
	month = {apr},
	number = {2},
	pages = {205--215},
	publisher = {Springer Fachmedien Wiesbaden GmbH},
	title = {{Raus aus den Silos -- mit DevOps zum Lean ManufacturingGet out of the silos -- with DevOps to Lean Manufacturing}},
	volume = {54},
	year = {2017}
}

@inproceedings{Senapathi2018,
	abstract = {DevOps is a set of principles and practices to improve collaboration between development and IT Operations. Against the backdrop of the growing adoption of DevOps in a variety of software development domains, this paper describes empirical research into factors influencing its implementation. It presents findings of an in-depth exploratory case study that explored DevOps implementation in a New Zealand product development organisation. The study involved interviewing six experienced software engineers who continuously monitored and reflected on the gradual implementation of DevOps principles and practices. For this case study the use of DevOps practices led to significant benefits, including increase in deployment frequency from about 30 releases a month to an average of 120 releases per month, as well as improved natural communication and collaboration between IT development and operations personnel. We found that the support of a number of technological enablers, such as implementing an automation pipeline and cross functional organisational structures, were critical to delivering the expected benefits of DevOps.},
	author = {Senapathi, Mali and Buchan, Jim and Osman, Hady},
	booktitle = {ACM International Conference Proceeding Series},
	doi = {10.1145/3210459.3210465},
	file = {/home/adam.kuffel/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Senapathi, Buchan, Osman - 2018 - DevOps capabilities, practices, and challenges Insights from a case study.pdf},
	isbn = {9781450364034},
	keywords = {Challenges, DevOps benefits, DevOps enablers, Practices},
	month = {jun},
	publisher = {Association for Computing Machinery},
	title = {{DevOps capabilities, practices, and challenges: Insights from a case study}},
	volume = {Part F1377},
	year = {2018}
}

@inproceedings{Shweta2014,
	abstract = {Continuous Integration (CI) is widely adopted as an efficient practice for code integration. CI advocates frequent integrations to the version control system to mitigate the "integration hell" problem. The CI process ensures that the binaries are always up to date by performing a build for every set of developer submissions. Since the developer submissions to CI are processed in a queued manner, an inevitable drawback is the time taken to verify the successful integration of submissions. Hence providing a quick feedback about the success or failure of the submissions may not be possible all the time which may lead to increased turnaround time for failed submissions and reduced developer productivity. This paper discusses an approach to provide a faster feedback about the successful integration of submissions by utilizing the power of distributed computing. This can ensure a higher success rate of integrations in the CI process and can substantially bring down the turnaround time for integrations that fail.},
	author = {Shweta, M. A. and John, Nimmy and Shenoy, Sanath},
	booktitle = {Proceedings - 2014 4th International Conference on Advances in Computing and Communications, ICACC 2014},
	doi = {10.1109/ICACC.2014.58},
	file = {/home/adam.kuffel/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Shweta, John, Shenoy - 2014 - Improving enterprise build process using a workflow driven approach in a distributed environment A generic.pdf},
	isbn = {9781479943647},
	keywords = {Continous Integration, distributed computing, incremental builds},
	month = {sep},
	pages = {214--217},
	publisher = {Institute of Electrical and Electronics Engineers Inc.},
	title = {{Improving enterprise build process using a workflow driven approach in a distributed environment: A generic technique to provide rapid integration feedback}},
	year = {2014}
}

@article{Sollner2019,
	abstract = {Zusammenfassung {\"U}berall dort, wo Dienstleistungen erbracht werden, ist Service Management integraler Bestandteil der Dienstleistung. Seit die Informationstechnik Einzug in Industrie, Finanz-und Handelswirtschaft gehalten hat-und mittlerweile alle Aspekte der Wirtschaft ma{\ss}geblich beeinflusst-, ist Service Management von IT-basierten Dienstleistungen zentraler Faktor f{\"u}r Erfolg oder Nichterfolg. Die dramatisch zunehmende Geschwindigkeit, vor allem aber die Richtung der Ver{\"a}nderung, stellt die Frage, inwieweit Service Management, wie wir es gewohnt sind, noch relevant ist: Wie sehr rechnet es sich noch, in Prozesse, Tools, Mit-arbeitertraining etc. zu investieren, wenn die Geschwindigkeit der Ver{\"a}nderungen Amortisation und erwarteten Gesch{\"a}ftsvorteil nicht mehr erlaubt? In diesem Artikel wird die momentane Situation inklusive der Herausforderungen beleuchtet, bevor ein L{\"o}sungsansatz vorgestellt wird, der langsam an Bedeutung und Sichtbarkeit gewinnt. Anhand von zwei Fallbeispielen zeigt der Beitrag, wie flexibel modernes Service Management eingesetzt werden kann, um den Herausforderungen ad{\"a}quat begegnen zu k{\"o}nnen. Abschlie{\ss}end wird ausgef{\"u}hrt, dass FitSM als pragmatische und leichtgewichtige L{\"o}sung als moderne Alternative zu ITIL {\textregistered} alle notwendigen Elemente zur Implemen-tierung von Service Management bereitstellt. Schl{\"u}sselw{\"o}rter IT-Servicemanagement {\textperiodcentered} FitSM {\textperiodcentered} ITIL {\textperiodcentered} DevOps {\textperiodcentered} Scrum {\textperiodcentered} Lean Management Service Management steht in diesem Beitrag synonym zum Begriff IT Service Management (ITSM). Der Beitrag legt ITIL in der Version von 2011 als Grundlage. Die neue Version 4 verabschiedet sich vom bekannten, bew{\"a}hrten und h{\"a}ufig implementierten Lebenszyklusphasenkonzept und einer prozessorientierten Darstellung. Damit ist eine Verbreitung und Nutzung in der Praxis noch offen. D. S{\"o}llner () Ash Vale, Surrey, Gro{\ss}britannien E-Mail: Dierk.Soellner@dsoellner.de Abstract Service Management forms an integral part of any service provided. Wherever IT took hold, such as finance industry (fintech), industrial applications (industry 4.0) and commercial services, IT service management provides the foundations for success of failure of any such service provided. However, given the speed and direction of digital transformation today, relevance of IT service management is under threat: The rate of innovation and step changes outpaces the time necessary for investments in tools, processes and staff training to redeem themselves. The authors introduce the reader to the subject matter by way of summarising the state of the art, before they present a new approach to IT service management that responds to the challenges of today's IT landscape. Next, through two case studies the authors illustrate how applying a flexible and modular modern IT service management framework allows companies to retain reliable, repeatable quality of service yet allow fast-paced innovation in IT to happen. The article ends with the conclusion that while ITIL still is an IT service management framework with much relevance, smaller organisations or those following a lean management and agile methodology may find a good balance of service management tools and self assessment in the toolbox of FitSM.},
	author = {S{\"o}llner, Dierk and Drescher, Michel},
	doi = {10.1365/s40702-019-00504-x},
	file = {/home/adam.kuffel/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/S{\"{o}}llner, Drescher - 2019 - Service Management in der {\"{A}}ra von Agile und DevOpsService Management in the Era of Agile and DevOps.pdf},
	issn = {1436-3011},
	journal = {HMD Praxis der Wirtschaftsinformatik},
	month = {apr},
	number = {2},
	pages = {318--331},
	publisher = {Springer Fachmedien Wiesbaden GmbH},
	title = {{Service Management in der {\"A}ra von Agile und DevOpsService Management in the Era of Agile and DevOps}},
	volume = {56},
	year = {2019}
}

@article{Potdar2020,
	abstract = {Server virtualization is a technological innovation broadly used in IT enterprises. Virtualization provides a platform to run different services of operating systems on the cloud. It facilitates to build multiple virtual machines on a single basic physical machine either in the form of hypervisors or containers. To host many microservice applications, the emergent technology has introduced a model which consists of different operations performed by smaller individual deployed services. Thus, the demand for low-overhead virtualization technique is rapidly developing. There are many lightweight virtualization technologies; docker is one among them, which is an open-source platform. This technology allows developers and system admins to build, create, and run applications using docker engine. This paper provides the performance evaluation of Docker containers and virtual machines using standard benchmark tools such as Sysbench, Phoronix, and Apache benchmark, which include CPU performance, Memory throughput, Storage read/write performance, load test, and operation speed measurement.},
	author = {Potdar, Amit M. and Narayan, D. G. and Kengond, Shivaraj and Mulla, Mohammed Moin},
	doi = {10.1016/j.procs.2020.04.152},
	file = {/home/adam.kuffel/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Potdar et al. - 2020 - Performance Evaluation of Docker Container and Virtual Machine.pdf},
	issn = {18770509},
	journal = {Procedia Computer Science},
	keywords = {Benchmark tools, Docker Container, Virtual Machine, Virtualization},
	pages = {1419--1428},
	publisher = {Elsevier B.V.},
	title = {{Performance Evaluation of Docker Container and Virtual Machine}},
	volume = {171},
	year = {2020}
}

@article{Kasteleiner2019,
	author = {Kasteleiner, Bj{\"o}rn and Schwartz, Alexander},
	doi = {10.1007/s00287-019-01173-2},
	file = {/home/adam.kuffel/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Kasteleiner, Schwartz - 2019 - DevOps Schnell, zuverl{\"{a}}ssig und sicher von der Idee zur Realisierung.pdf},
	issn = {1432122X},
	journal = {Informatik-Spektrum},
	month = {jun},
	number = {3},
	pages = {211--214},
	publisher = {Springer Verlag},
	title = {{DevOps: Schnell, zuverl{\"a}ssig und sicher von der Idee zur Realisierung}},
	volume = {42},
	year = {2019}
}

@article{Baxter2006,
	abstract = {Software engineering for high-performance computer systems (HPCS) is regarded by many including many of its practitioners - as strangely, even esoterically, different from "standard" software engineering. That there is nuances are undeniable, but it is our thesis that software engineering for HPCS should be approached like any other software engineering task. Based on over thirteen years of software development experience on parallel and other HPCS, we present an overview of the engineering processes used at EPCC. We describe our approaches to delivering high-quality software on time and to budget, approaches which have helped sustain EPCC as a self-funded institute at the University of Edinburgh.},
	author = {Baxter, R.},
	doi = {10.1049/ic:20040411},
	file = {/home/adam.kuffel/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Johann - 2017 - Software engineering is software engineering.pdf},
	pages = {14--18},
	title = {{Software engineering is software engineering}},
	url = {www.se-radio.net},
	year = {2006}
}

@inproceedings{Siebra2019,
	abstract = {DevOps is a recent approach that intends to improve the collaboration between development and IT operations teams, in order to establish a continuous and efficient deployment process. Previous studies show that DevOps is based on dimensions, such as culture of collaboration, automation and monitoring. However, few studies discuss the current frameworks that support such dimensions, so that there is a lack in information that could assist development teams in deciding for the most adequate framework according to their needs. This work aims at presenting a practical DevOps implementation and analysing how the process of software delivery and infrastructure changes was automated. Our approach follows the principles of infrastructure as code, where a configuration platform - PowerShell DSC - was used to automatically define reliable environments for continuous software delivery. Then, we compare this approach with other alternative such as Chef and Puppet tools, stressing the features, advantages and challenges of each strategy. The lessons learned from this work are then used to create a more concrete set of practices that could assist the transition from traditional approaches to an automation process of continuous software delivery.},
	author = {Siebra, Clauirton and Lacerda, Rosberg and Cerqueira, Italo and Quintino, Jonysberg P. and Florentin, Fabiana and {Da Silva}, Fabio Q.B. and Santos, Andre L.M.},
	booktitle = {ICSOFT 2018 - Proceedings of the 13th International Conference on Software Technologies},
	doi = {10.5220/0006826104270436},
	file = {/home/adam.kuffel/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Siebra et al. - 2019 - From theory to practice The challenges of a Devops infrastructure as code implementation.pdf},
	isbn = {9789897583209},
	keywords = {Automation, DevOps, Infrastructure as Code, Software Delivery Management},
	pages = {427--436},
	publisher = {SciTePress},
	title = {{From theory to practice: The challenges of a Devops infrastructure as code implementation}},
	year = {2019}
}

@article{Feitelson2013,
	abstract = {Internet companies such as Facebook operate in a 'perpetual development' mindset. This means that the website continues to undergo development with no predefined final objective, and that new developments are deployed so that users can enjoy them as soon as they're ready. To support this, Facebook uses both technical approaches such as peer review and extensive automated testing, and a culture of personal responsibility. {\textcopyright} 1997-2012 IEEE.},
	author = {Feitelson, Dror G and Frachtenberg, Eitan and Beck, Kent L},
	doi = {10.1109/MIC.2013.25},
	file = {/home/adam.kuffel/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Feitelson, Frachtenberg, Beck - 2013 - Feature Devops Development and Deployment at Facebook.pdf},
	issn = {10897801},
	journal = {IEEE Internet Computing},
	keywords = {devops, perpetual development, web development},
	number = {4},
	pages = {8--17},
	title = {{Development and deployment at facebook}},
	url = {www.computer.org/internet/},
	volume = {17},
	year = {2013}
}

@inproceedings{Mazzara2019,
	abstract = {This paper describes our experience of training a team of developers of an East-European phone service provider. The training experience was structured in two sessions of two days each conducted in different weeks with a gap of about fifteen days. The first session was dedicated to the Continuous Integration Delivery Pipeline, and the second on Agile methods. We summarize the activity, its preparation and delivery and draw some conclusions out of it on our mistakes and how future session should be addressed.},
	archiveprefix = {arXiv},
	arxivid = {1807.01632},
	author = {Mazzara, Manuel and Naumchev, Alexandr and Safina, Larisa and Sillitti, Alberto and Urysov, Konstantin},
	booktitle = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
	doi = {10.1007/978-3-030-06019-0_8},
	eprint = {1807.01632},
	file = {/home/adam.kuffel/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Mazzara et al. - 2019 - Teaching devops in corporate environments An experience report.pdf},
	isbn = {9783030060183},
	issn = {16113349},
	month = {jul},
	pages = {100--111},
	title = {{Teaching devops in corporate environments: An experience report}},
	url = {http://arxiv.org/abs/1807.01632},
	volume = {11350 LNCS},
	year = {2019}
}

@article{Konig2019,
	abstract = {Zusammenfassung Der vorliegende Artikel besch{\"a}ftigt sich zentral mit dem Thema DevOps. Daf{\"u}r werden die Urspr{\"u}nge, Entstehung und Entwicklung der DevOps-Bewegung beleuchtet. Es wird diskutiert, warum der Begriff nicht konkret definiert werden kann und welche Auswirkungen dies mit sich bringt. Weiterhin werden aus-gew{\"a}hlte Grundlagenprinzipien erl{\"a}utert und verschiedene Strategien aufgezeigt mit-tels welchen DevOps in den ersten Schritten in IT-Unternehmen eingef{\"u}hrt werden kann. Zus{\"a}tzlich wird das Konzept von NoOps eingef{\"u}hrt, welches als Weiterent-wicklung von DevOps betrachtet werden kann. Auf der Basis dieser Konzepte wird argumentiert wie sich der Beruf des Developers, als auch der Operations-Fachkraft ver{\"a}ndert und mit welchen neuen Herausforderungen diese konfrontiert werden. Abstract This article talks about the topic of DevOps. The origins, emergence and further expansion over time of the DevOps movement will get highlighted. A discussion takes place, why the term cannot be specifically defined and which effects this entails. The underlying core principles are explained and a number of strategies are shown on how IT companies can implement initial steps for a DevOps adaptation. In addition, the concept of NoOps is presented which can be regarded as a further development of DevOps. On the basis of the two presented concepts it is},
	author = {K{\"o}nig, Georgia and Kugel, Ren{\'e}},
	doi = {10.1365/s40702-019-00507-8},
	file = {/home/adam.kuffel/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/K{\"{o}}nig, Kugel - 2019 - DevOps---Welcome to the JungleDevOps---Welcome to the Jungle.pdf},
	issn = {1436-3011},
	journal = {HMD Praxis der Wirtschaftsinformatik},
	month = {apr},
	number = {2},
	pages = {289--300},
	publisher = {Springer Fachmedien Wiesbaden GmbH},
	title = {{DevOps---Welcome to the JungleDevOps---Welcome to the Jungle}},
	volume = {56},
	year = {2019}
}

@article{Ozkaya2019,
	author = {Ozkaya, Ipek},
	doi = {10.1109/MS.2019.2910943},
	file = {/home/adam.kuffel/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Ozkaya - 2019 - Are DevOps and Automation Our Next Silver Bullet.pdf},
	issn = {19374194},
	journal = {IEEE Software},
	month = {jul},
	number = {4},
	publisher = {IEEE Computer Society},
	title = {{Are DevOps and Automation Our Next Silver Bullet?}},
	volume = {36},
	year = {2019}
}

@inproceedings{Rahman2018a,
	abstract = {Configuration as code (CaC) tools, such as Ansible and Puppet, help software teams to implement continuous deployment and deploy software changes rapidly. CaC tools are growing in popularity, yet what challenges programmers encounter about CaC tools, have not been characterized. A systematic investigation on what questions are asked by programmers, can help us identify potential technical challenges about CaC, and can aid in successful use of CaC tools. The goal of this paper is to help current and potential configuration as code (CaC) adoptees in identifying the challenges related to CaC through an analysis of questions asked by programmers on a major question and answer website. We extract 2,758 Puppet-related questions asked by programmers from January 2010 to December 2016, posted on Stack Overflow. We apply qualitative analysis to identify the questions programmers ask about Puppet. We also investigate the trends in questions with unsatisfactory answers, and changes in question categories over time. From our empirical study, we synthesize 16 major categories of questions. The three most common question categories are: (i) syntax errors, (ii) provisioning instances; and (iii) assessing Puppet's feasibility to accomplish certain tasks. Three categories of questions that yield the most unsatisfactory answers are (i) installation, (ii) security, and (iii) data separation.},
	author = {Rahman, Akond and Partho, Asif and Morrison, Patrick and Williams, Laurie},
	booktitle = {Proceedings - International Conference on Software Engineering},
	doi = {10.1145/3194760.3194769},
	file = {/home/adam.kuffel/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Rahman et al. - Unknown - What Questions Do Programmers Ask About Configuration as Code.pdf},
	isbn = {9781450357456},
	issn = {02705257},
	keywords = {challenge, configuration as code, continuous deployment, devops, infrastructure as code, programming, puppet, question, stack overflow},
	pages = {16--22},
	title = {{What questions do programmers ask about configuration as code?}},
	url = {https://puppet.com/},
	year = {2018}
}

@article{Shahin2017,
	abstract = {Continuous practices, i.e., continuous integration, delivery, and deployment, are the software development industry practices that enable organizations to frequently and reliably release new features and products. With the increasing interest in the literature on continuous practices, it is important to systematically review and synthesize the approaches, tools, challenges, and practices reported for adopting and implementing continuous practices. This paper aimed at systematically reviewing the state of the art of continuous practices to classify approaches and tools, identify challenges and practices in this regard, and identify the gaps for future research. We used the systematic literature review method for reviewing the peer-reviewed papers on continuous practices published between 2004 and June 1, 2016. We applied the thematic analysis method for analyzing the data extracted from reviewing 69 papers selected using predefined criteria. We have identified 30 approaches and associated tools, which facilitate the implementation of continuous practices in the following ways: 1) reducing build and test time in continuous integration (CI); 2) increasing visibility and awareness on build and test results in CI; 3) supporting (semi-) automated continuous testing; 4) detecting violations, flaws, and faults in CI; 5) addressing security and scalability issues in deployment pipeline; and 6) improving dependability and reliability of deployment process. We have also determined a list of critical factors, such as testing (effort and time), team awareness and transparency, good design principles, customer, highly skilled and motivated team, application domain, and appropriate infrastructure that should be carefully considered when introducing continuous practices in a given organization. The majority of the reviewed papers were validation (34.7{\%}) and evaluation (36.2{\%}) research types. This paper also reveals that continuous practices have been successfully applied to both greenfield and maintenance projects. Continuous practices have become an important area of software engineering research and practice. While the reported approaches, tools, and practices are addressing a wide range of challenges, there are several challenges and gaps, which require future research work for improving the capturing and reporting of contextual information in the studies reporting different aspects of continuous practices; gaining a deep understanding of how software-intensive systems should be (re-) architected to support continuous practices; and addressing the lack of knowledge and tools for engineering processes of designing and running secure deployment pipelines.},
	author = {Shahin, Mojtaba and {Ali Babar}, Muhammad and Zhu, Liming},
	doi = {10.1109/ACCESS.2017.2685629},
	file = {/home/adam.kuffel/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Shahin, Ali Babar, Zhu - 2017 - Continuous Integration, Delivery and Deployment A Systematic Review on Approaches, Tools, Challenges and.pdf},
	issn = {21693536},
	journal = {IEEE Access},
	keywords = {Continuous integration, continuous delivery, continuous deployment, continuous software engineering, empirical software engineering, systematic literature review},
	pages = {3909--3943},
	publisher = {Institute of Electrical and Electronics Engineers Inc.},
	title = {{Continuous Integration, Delivery and Deployment: A Systematic Review on Approaches, Tools, Challenges and Practices}},
	volume = {5},
	year = {2017}
}

@article{Wiedemann2019,
	abstract = {A traditional software company releases their flagship product infrequently; as rarely as every few years. Each release can include hundreds of new features and improvements. Because releases are infrequent, the users are thankful, as they had been growing impatient for the new release. However, disappointment sets in when bugs are found and features don't work as expected. Under great stress and with great turmoil, an emergency release is produced and put into production (hurried through the regular release process, often achieved by skipping tests), which has more bugs and the process repeats with more emergency releases, leading to more frustration, stress, and disappointment. Worst yet, new business opportunities are missed or ignored due to doubt, uncertainty, and distrust in the IT department's ability to deliver value.},
	author = {Wiedemann, Anna and Forsgren, Nicole and Wiesche, Manuel and Gewald, Heiko and Krcmar, Helmut},
	doi = {10.1145/3329781.3338532},
	file = {/home/adam.kuffel/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Unknown - Unknown - 3d102e42ad79a345ebd6464047ac9a6cd10670f4.pdf},
	issn = {15427749},
	journal = {Queue},
	number = {2},
	title = {{The DevOps phenomenon}},
	url = {https://research.google/pubs/pub48326/},
	volume = {17},
	year = {2019}
}

@article{Callanan2016,
	abstract = {Wotif Group used DevOps principles to recover from the downward spiral of manual release activity that many IT departments face. Its approach involved the idea of 'making it easy to do the right thing.' By defining the right thing (deployment standards) for development and operations teams and making it easy to adopt, Wotif drastically improved the average release cycle time. This article is part of a theme issue on DevOps.},
	author = {Callanan, Matt and Spillane, Alexandra},
	doi = {10.1109/MS.2016.66},
	file = {/home/adam.kuffel/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Callanan, Spillane - 2016 - DevOps Making It Easy to Do the Right Thing.pdf},
	issn = {07407459},
	journal = {IEEE Software},
	keywords = {DevOps, Internet, Wotif Group, continuous delivery, continuous deployment, e-commerce, software delivery, software development, software engineering, software release, software release management and delivery},
	number = {3},
	pages = {53--59},
	title = {{DevOps: Making It Easy to Do the Right Thing}},
	volume = {33},
	year = {2016}
}

@inproceedings{Guerriero2019,
	abstract = {Infrastructure-as-code (IaC) is the DevOps tactic of managing and provisioning infrastructure through machine-readable definition files, rather than physical hardware configuration or interactive configuration tools. From a maintenance and evolution perspective, the topic has picked the interest of practitioners and academics alike, given the relative scarcity of supporting patterns, best practices, tools, and software engineering techniques. Using the data coming from 44 semistructured interviews to senior developers of as many companies, in this paper we shed light on the state of the practice in the adoption of IaC and the key software engineering challenges in the field. Particularly, we investigate (i) how practitioners adopt and develop IaC, (ii) which support is currently available, i.e., the typically used tools and their advantages/disadvantages, and (iii) what are the practitioner's needs when dealing with IaC development, maintenance, and evolution. Our findings clearly highlight the need for more research in the field: The support provided by currently available tools is still limited, and developers feel the need of novel techniques for testing and maintaining IaC code.},
	author = {Guerriero, Michele and Garriga, Martin and Tamburri, Damian A and Palomba, Fabio},
	booktitle = {Proceedings - 2019 IEEE International Conference on Software Maintenance and Evolution, ICSME 2019},
	doi = {10.1109/ICSME.2019.00092},
	file = {/home/adam.kuffel/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Guerriero et al. - Unknown - Adoption, Support, and Challenges of Infrastructure-as-Code Insights from Industry.pdf},
	isbn = {9781728130941},
	keywords = {Cloud Automation, DevOps, Infrastructure-as-Code, Software Maintenance {\&} Evolution},
	pages = {580--589},
	title = {{Adoption, Support, and Challenges of Infrastructure-as-Code: Insights from Industry}},
	url = {http://www.dice-h2020.eu},
	year = {2019}
}

@inproceedings{Artac2017,
	abstract = {DevOps entails a series of software engineering tactics aimed at shortening the actionable operation of software design changes. One of these tactics is to harness infrastructure-as-code, that is, writing a blueprint that contains deployment specifications ready for orchestration in the cloud. This abstract briefly discusses all necessary elements and abstractions in writing and maintaining that blueprint, revolving around a key standard for its expression, namely, the OASIS 'Topology and Orchestration Specification for Cloud Applications' (TOSCA) industrial standard adopted by as many as 60+ big industrial players worldwide.},
	author = {Artac, Matej and Borovssak, Tadej and {Di Nitto}, Elisabetta and Guerriero, Michele and Tamburri, Damian Andrew},
	booktitle = {Proceedings - 2017 IEEE/ACM 39th International Conference on Software Engineering Companion, ICSE-C 2017},
	doi = {10.1109/ICSE-C.2017.162},
	file = {/home/adam.kuffel/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Artac et al. - 2017 - DevOps Introducing infrastructure-as-code.pdf},
	isbn = {9781538615898},
	keywords = {DevOps, Infrastructure-as-Code, TOSCA},
	month = {jun},
	pages = {497--498},
	publisher = {Institute of Electrical and Electronics Engineers Inc.},
	title = {{DevOps: Introducing infrastructure-as-code}},
	year = {2017}
}

@inproceedings{Singh2017,
	abstract = {Container-based virtualization uses single kernel to run multiple instances on an operating system and virtualization layer runs as an application within the operating system. It is also called operating system virtualization and in this approach, the kernel of operating system runs on the hardware node with different isolated guest virtual machines (VMs) called containers. The container-based virtualization doesn't require each guest to run a completely installed operating system. This virtualization approach also helps to improve performance since there is a single operating system taking care of all hardware calls. The disadvantage of container-based virtualization is that each guest must use the same operating system the host uses. In hypervisor-based virtualization the virtual machine is not a complete operating system instance but its partial instance of the operating system and hypervisor allows multiple operating systems to share a single hardware host. However in container-based virtualization, a kernel is run with several different virtual machines installed on top of it. The container-based virtualization is used in Linux environments like Parallels Virtuozzo and open source OpenVZ project. This paper highlights the role of Container based virtualization and Docker in shaping the future of Cloud technology. The adoption of containers will continue to grow and majority of Microservice applications will be built on the containers in the future.},
	author = {Singh, Sachchidanand and Singh, Nirmala},
	booktitle = {Proceedings of the 2016 2nd International Conference on Applied and Theoretical Computing and Communication Technology, iCATccT 2016},
	doi = {10.1109/ICATCCT.2016.7912109},
	file = {/home/adam.kuffel/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Niranjan, Institute of Electrical and Electronics Engineers. Bangalore Section, Institute of Electrical and Electronics Engineers - Unkn.pdf},
	isbn = {9781509023981},
	keywords = {Bluemix, Carina, Cloud, Cloud Foundry, Containers, CoreOS, Docker, Hyper-V Containers, Hypervisor, Kubernetes, Virtualization, Windows Server Containers},
	pages = {804--807},
	title = {{Containers {\&} Docker: Emerging roles {\&} future of Cloud technology}},
	year = {2017}
}

% Webpages

@misc{ZDNET_DEVOPS,
	author = {McKendrick, Joe},
	howpublished = {\url{https://www.zdnet.com/article/devops-leaders-deliver-software-200-times-more-frequently-than-their-peers-study-shows/}},
	month = sep,
	note = {Accessed: 2021-01-19},
	publisher = {ZDNet},
	title = {DevOps leaders deliver software 200 times more frequently than their peers, study shows},
	year = {2019}
}

@misc{TECHBEACON,
	author = {Null, Christopher},
	howpublished = {\url{https://techbeacon.com/devops/10-companies-killing-it-devops}},
	month = sep,
	note = {Accessed: 2021-01-19},
	publisher = {TechBeacon},
	title = {10 companies killing it at DevOps},
	year = {2015}
}

@misc{TIOBE,
	howpublished = {\url{https://www.tiobe.com/tiobe-index/}},
	note = {Accessed: 2021-01-19},
	title = {TIOBE Index for January 2021}
}

@misc{ASDF,
	howpublished = {\url{https://asdf-vm.com/\#/core-manage-asdf}},
	note = {Accessed: 2021-01-25},
	title = {ASDF Installation}
}

@misc{PHOENIX,
	howpublished = {\url{https://www.phoenixframework.org/}},
	note = {Accessed: 2021-01-19},
	title = {Phoenix Framework}
}

@misc{PHOENIX_CHANNELS,
	howpublished = {\url{https://hexdocs.pm/phoenix/Phoenix.Channel.html}},
	note = {Accessed: 2021-02-24},
	title = {Phoenix.Channel}
}

@misc{PHOENIX_ROUTER,
	howpublished = {\url{https://hexdocs.pm/phoenix/Phoenix.Router.html}},
	note = {Accessed: 2021-02-24},
	title = {Phoenix.Router}
}

@misc{PHOENIX_TELEMETRY,
	howpublished = {\url{https://hexdocs.pm/phoenix/telemetry.html}},
	note = {Accessed: 2021-02-24},
	title = {Telemetry}
}

@misc{ELIXIR,
	howpublished = {\url{https://elixir-lang.org/}},
	note = {Accessed: 2021-01-19},
	title = {Phoenix Framework}
}

@misc{ELIXIR_UNIT_TESTING,
	howpublished = {\url{https://hexdocs.pm/ex_unit/ExUnit.html}},
	note = {Accessed: 2021-02-24},
	title = {Unit testing framework for Elixir}
}

@misc{ELIXIR_COMPANIES,
	howpublished = {\url{https://www.monterail.com/blog/famous-companies-using-elixir}},
	note = {Accessed: 2021-01-20},
	title = {Eight famous companies using Elixir and why they made the switch}
}

@misc{ELIXIR_CODE_QUALITY,
	howpublished = {\url{https://hexdocs.pm/credo/overview.html}},
	note = {Accessed: 2021-02-24},
	title = {Credo}
}

@misc{ELIXIR_CREDO,
	howpublished = {\url{https://itnext.io/enforcing-code-quality-in-elixir-20f87efc7e66}},
	note = {Accessed: 2021-02-24},
	title = {Enforcing code quality in Elixir}
}

@misc{ELIXIR_CREDO_EXIT_STATUS,
	howpublished = {\url{https://hexdocs.pm/credo/exit\_statuses.html\#content}},
	note = {Accessed: 2021-02-24},
	title = {Exit Status}
}

@misc{ELIXIR_FORMATTER,
	howpublished = {\url{https://hexdocs.pm/mix/1.11.2/Mix.Tasks.Format.html}},
	note = {Accessed: 2021-02-24},
	title = {mix format}
}

@misc{ELIXIR_HEX_COVERAGE_TOOLS,
	howpublished = {\url{https://hex.pm/packages?search=cover&sort=recent_downloads}},
	note = {Accessed: 2021-02-24},
	title = {Hex code coverage packages}
}

@misc{MAKEFILE_HELP,
	howpublished = {\url{https://marmelab.com/blog/2016/02/29/auto-documented-makefile.html}},
	note = {Accessed: 2021-02-24},
	title = {Self-Documented Makefile}
}

@misc{SEMVER,
	howpublished = {\url{https://semver.org/}},
	note = {Accessed: 2021-02-24},
	title = {Semantic Versioning 2.0.0}
}

@misc{PUPPET,
	howpublished = {\url{https://puppet.com/resources/report/2020-state-of-devops-report/}},
	note = {Accessed: 2021-01-20},
	title = {Puppet State of DevOps Report 2020}
}

@misc{GIT_SCM,
	howpublished = {\url{https://git-scm.com/}},
	note = {Accessed: 2021-01-23},
	title = {Git}
}

@misc{GIT_SCM_BASICS,
	howpublished = {\url{https://git-scm.com/book/en/v2/Git-Basics-Getting-a-Git-Repository}},
	note = {Accessed: 2021-01-23},
	title = {Git Basics}
}

@misc{GIT_SCM_BRANCHING,
	howpublished = {\url{https://git-scm.com/book/en/v2/Git-Branching-Branches-in-a-Nutshell}},
	note = {Accessed: 2021-01-24},
	title = {Git Branching - Branches in a Nutshell}
}

@misc{GIT_SCM_REMOTES,
	howpublished = {\url{https://git-scm.com/book/en/v2/Git-Basics-Working-with-Remotes}},
	note = {Accessed: 2021-01-24},
	title = {Git Basics - Working with Remotes}
}

@misc{GITHUB_ABOUT_PR,
	howpublished = {\url{https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/about-pull-requests}},
	note = {Accessed: 2021-01-24},
	title = {About pull requests}
}

@misc{GITHUB_ACTIONS,
	howpublished = {\url{https://github.blog/2019-08-08-github-actions-now-supports-ci-cd/}},
	note = {Accessed: 2021-02-04},
	title = {GitHub Actions now supports CI/CD, free for public repositories}
}

@misc{GITHUB_ACTIONS_DOCS,
	howpublished = {\url{https://docs.github.com/en/actions}},
	note = {Accessed: 2021-02-14},
	title = {GitHub Actions}
}

@misc{FOWLER_CI,
	howpublished = {\url{https://martinfowler.com/articles/continuousIntegration.html}},
	note = {Accessed: 2021-01-24},
	title = {Continuous Integration}
}

@misc{DOCKER_WEBSITE,
	howpublished = {\url{https://www.docker.com/resources/what-container}},
	note = {Accessed: 2021-01-24},
	title = {What is a Container?}
}

@misc{DOCKER_CONTAINER_IMAGE,
	howpublished = {\url{https://docs.docker.com/get-started/\#what-is-a-container-image}},
	note = {Accessed: 2021-01-24},
	title = {What is a container image?}
}

@misc{DOCKER_ABOUT_REGISTRY,
	howpublished = {\url{https://docs.docker.com/registry/introduction/}},
	note = {Accessed: 2021-01-24},
	title = {About Registry}
}

@misc{DOCKER_OVERVIEW,
	howpublished = {\url{https://docs.docker.com/get-started/overview}},
	note = {Accessed: 2021-01-24},
	title = {Docker overview}
}

@misc{DOCKER_BASICS_REGISTRY,
	howpublished = {\url{https://docs.docker.com/registry/\#basic-commands}},
	note = {Accessed: 2021-01-24},
	title = {Docker Registry}
}

@misc{DOCKER_DEPLOY_REGISTRY,
	howpublished = {\url{https://docs.docker.com/registry/deploying/}},
	note = {Accessed: 2021-01-24},
	title = {Deploy a registry server}
}

@misc{DOCKER_RUN_REFERENCE,
	howpublished = {\url{https://docs.docker.com/engine/reference/run/}},
	note = {Accessed: 2021-01-24},
	title = {Docker run reference}
}

@misc{CONTAINERD_WEBSITE,
	howpublished = {\url{https://containerd.io/}},
	note = {Accessed: 2021-01-24},
	title = {Containerd}
}

@misc{STACKSHARE_CONTAINERS_VMS,
	howpublished = {\url{https://stackshare.io/virtual-machine-platforms-and-containers}},
	note = {Accessed: 2021-01-24},
	title = {What are the best Virtual Machine Platforms and Containers Tools?}
}

@misc{JFROG_CONTAINER_IMAGES,
	howpublished = {\url{https://jfrog.com/knowledge-base/a-beginners-guide-to-understanding-and-building-docker-images/}},
	note = {Accessed: 2021-01-24},
	title = {A Beginner{\rq}s Guide to Understanding and Building Docker Images}
}

@misc{PACKER,
	howpublished = {\url{https://www.packer.io/}},
	note = {Accessed: 2021-01-30},
	title = {Packer - Build Automated Machine Images}
}

@misc{STACKSHARE_HOME,
	howpublished = {\url{https://stackshare.io/}},
	note = {Accessed: 2021-01-30},
	title = {Stackshare.io}
}

@misc{STACKSHARE_VCS,
	howpublished = {\url{https://stackshare.io/version-control-system}},
	note = {Accessed: 2021-01-30},
	title = {What are the best Version Control System Tools?}
}

@misc{STACKSHARE_CODE_COLLABORATION,
	howpublished = {\url{https://stackshare.io/code-collaboration-version-control}},
	note = {Accessed: 2021-01-30},
	title = {What are the best Code Collaboration and Version Control Tools?}
}

@misc{STACKSHARE_CI,
	howpublished = {\url{https://stackshare.io/continuous-integration}},
	note = {Accessed: 2021-01-31},
	title = {What are the best Continuous Integration Tools?}
}

@misc{STACKSHARE_CAAS,
	howpublished = {\url{https://stackshare.io/containers-as-a-service}},
	note = {Accessed: 2021-02-18},
	title = {What are the best Containers as a Service Tools?}
}

@misc{TECHCRUNCH_STACKSHARE,
	howpublished = {\url{https://techcrunch.com/2017/06/19/why-stackshare-is-quietly-becoming-a-secret-weapon-for-developers-and-silicon-valley-ctos/?guccounter=1}},
	note = {Accessed: 2021-01-30},
	title = {Why Stackshare is quietly becoming a secret weapon for developers and Silicon Valley CTOs}
}

@misc{TECHCRUNCH_GITHUB_FREE,
	howpublished = {\url{https://techcrunch.com/2020/04/14/github-is-now-free-for-all-teams/}},
	note = {Accessed: 2021-02-02},
	title = {GitHub is now free for all teams}
}

@misc{TECHCRUNCH_TERRAFORM,
	howpublished = {\url{https://techcrunch.com/2012/11/28/vagrant-founder-launches-hashicorp-to-support-his-open-source-developer-management-tool/}},
	note = {Accessed: 2021-02-18},
	title = {Vagrant Founder Launches Hashicorp To Support His Open-Source Developer Management Tool}
}

@misc{GITHUB_HOME,
	howpublished = {\url{https://github.com/}},
	note = {Accessed: 2021-01-30},
	title = {Github Website: Where the world builds software}
}

@misc{GITHUB_STORY,
	howpublished = {\url{https://smhatre59.medium.com/the-untold-story-of-github-132840f72f56}},
	note = {Accessed: 2021-01-30},
	title = {The untold story of Github}
}

@misc{GITHUB_MICROSOFT,
	howpublished = {\url{https://www.theverge.com/2018/10/26/17954714/microsoft-github-deal-acquisition-complete}},
	note = {Accessed: 2021-01-30},
	title = {Microsoft completes GitHub acquisition}
}

@misc{GITHUB_PRICING,
	howpublished = {\url{https://github.com/pricing}},
	note = {Accessed: 2021-02-02},
	title = {Pricing - Plans for all developers}
}

@misc{GITLAB_ANOUNCMENT,
	howpublished = {\url{https://thenextweb.com/apps/2011/10/13/ship-it-faster-and-cheaper-gitlab-is-github-for-your-own-servers/}},
	note = {Accessed: 2021-01-30},
	title = {Ship it faster and cheaper -- GitLab is GitHub for your own servers}
}

@misc{GITLAB_ABOUT,
	howpublished = {\url{https://about.gitlab.com/}},
	note = {Accessed: 2021-01-30},
	title = {The complete DevOps platform}
}

@misc{GITLAB_PRICING,
	howpublished = {\url{https://about.gitlab.com/pricing/}},
	note = {Accessed: 2021-01-30},
	title = {GitLab Pricing}
}

@misc{GITLAB_FEATURES,
	howpublished = {\url{https://about.gitlab.com/pricing/gitlab-com/feature-comparison/}},
	note = {Accessed: 2021-02-02},
	title = {Feature Comparison}
}

@misc{GITLAB_ACTIONS,
	howpublished = {\url{https://about.gitlab.com/releases/2013/07/09/announcing-gitlab-ci-3-0/}},
	note = {Accessed: 2021-02-04},
	title = {Announcing GitLab CI 3.0}
}

@misc{BITBUCKET_PRICING,
	howpublished = {\url{https://www.atlassian.com/software/bitbucket/pricing}},
	note = {Accessed: 2021-02-02},
	title = {Plans and pricing}
}

@misc{BITBUCKET_HISTORY,
	howpublished = {\url{http://mercurial.808500.n3.nabble.com/Bitbucket-org-td798877.html}},
	note = {Accessed: 2021-01-30},
	title = {Bitbucket.org}
}

@misc{BITBUCKET_OTHER_PRODUCTS,
	howpublished = {\url{https://www.atlassian.com/software}},
	note = {Accessed: 2021-01-30},
	title = {Atlassian - Products for teams, from startup to enterprise}
}

@misc{AWS_CODECOMMIT_ANOUNCEMENT,
	howpublished = {\url{https://aws.amazon.com/de/blogs/aws/now-available-aws-codecommit/}},
	note = {Accessed: 2021-01-30},
	title = {Now Available -- AWS CodeCommit}
}

@misc{AWS_CODECOMMIT_PRICING,
	howpublished = {\url{https://aws.amazon.com/codecommit/pricing/?nc1=h_ls}},
	note = {Accessed: 2021-02-02},
	title = {AWS CodeCommit pricing}
}

@misc{AWS_CODECOMMIT,
	howpublished = {\url{https://aws.amazon.com/de/blogs/aws/now-available-aws-codecommit/}},
	note = {Accessed: 2021-02-04},
	title = {Now Available – AWS CodeCommit}
}

@misc{AWS_CODESTAR_ANOUNCEMENT,
	howpublished = {\url{https://aws.amazon.com/de/blogs/aws/code-management-and-deployment/}},
	note = {Accessed: 2021-01-30},
	title = {New AWS Tools for Code Management and Deployment}
}

@misc{AWS_DEVELOPER_TOOLS,
	howpublished = {\url{https://docs.aws.amazon.com/whitepapers/latest/aws-overview/developer-tools.html}},
	note = {Accessed: 2021-01-30},
	title = {Developer Tools}
}

@misc{AWS_CLOUD9,
	howpublished = {\url{https://aws.amazon.com/de/cloud9/}},
	note = {Accessed: 2021-01-30},
	title = {Eine Cloud-basierte IDE zum Schreiben, Ausf{\"u}hren und Debuggen von Code}
}

@misc{AWS_GARTNER,
	howpublished = {\url{https://pages.awscloud.com/GLOBAL-multi-DL-gartner-mq-cips-2020-learn.html}},
	note = {Accessed: 2021-02-18},
	title = {2020 Magic Quadrant for Cloud Infrastructure and Platform Services}
}

@misc{AWS_EC2_ORIGINS,
	howpublished = {\url{http://blog.b3k.us/2009/01/25/ec2-origins.html}},
	note = {Accessed: 2021-02-20},
	title = {EC2 Origins}
}

@misc{AWS_ABOUT,
	howpublished = {\url{https://aws.amazon.com/de/about-aws/}},
	note = {Accessed: 2021-02-20},
	title = {Informationen zu AWS}
}

@misc{AWS_MEDIUM_TOP10_SERVICES,
	howpublished = {\url{https://medium.com/faun/top-10-aws-services-according-to-popularity-bd78eea2f7a9}},
	note = {Accessed: 2021-02-20},
	title = {Top 10 AWS Services according to popularity}
}

@misc{AWS_STATISTA,
	howpublished = {\url{https://de.statista.com/infografik/20802/weltweiter-marktanteil-von-cloud-infrastruktur-dienstleistern/}},
	note = {Accessed: 2021-02-20},
	title = {Amazon ist die Nummer 1 in der Cloud}
}

@misc{AWS_STATISTA_REVNUE,
	howpublished = {\url{https://www.statista.com/statistics/233725/development-of-amazon-web-services-revenue/}},
	note = {Accessed: 2021-02-20},
	title = {Annual revenue of Amazon Web Services from 2013 to 2019}
}

@misc{AWS_REGIONS_AND_AZS,
	howpublished = {\url{https://aws.amazon.com/de/about-aws/global-infrastructure/regions\_az/}},
	note = {Accessed: 2021-02-21},
	title = {Regionen und Availability Zones}
}

@misc{AWS_EC2,
	howpublished = {\url{https://aws.amazon.com/de/ec2}},
	note = {Accessed: 2021-02-21},
	title = {Amazon EC2}
}

@misc{AWS_S3,
	howpublished = {\url{https://docs.aws.amazon.com/AmazonS3/latest/userguide/creating-bucket.html}},
	note = {Accessed: 2021-02-24},
	title = {Step 1: Create your first S3 bucket}
}

@misc{AWS_IAM,
	howpublished = {\url{https://aws.amazon.com/de/iam/}},
	note = {Accessed: 2021-02-21},
	title = {AWS Identity and Access Management (IAM)}
}

@misc{AWS_ECR,
	howpublished = {\url{https://aws.amazon.com/de/ecr/}},
	note = {Accessed: 2021-02-21},
	title = {Amazon Elastic Container Registry}
}

@misc{AWS_ECR_REPO_CREATE,
	howpublished = {\url{https://docs.aws.amazon.com/AmazonECR/latest/userguide/repository-create.html}},
	note = {Accessed: 2021-02-25},
	title = {Creating a repository}
}

@misc{AWS_ELB,
	howpublished = {\url{https://aws.amazon.com/de/elasticloadbalancing}},
	note = {Accessed: 2021-02-21},
	title = {Elastic Load Balancing}
}

@misc{AWS_VPC,
	howpublished = {\url{https://aws.amazon.com/de/vpc}},
	note = {Accessed: 2021-02-21},
	title = {Amazon Virtual Private Cloud}
}

@misc{AWS_ECS,
	howpublished = {\url{https://aws.amazon.com/de/ecs}},
	note = {Accessed: 2021-02-21},
	title = {Amazon Elastic Container Service}
}

@misc{AWS_EKS,
	howpublished = {\url{https://aws.amazon.com/de/eks}},
	note = {Accessed: 2021-02-21},
	title = {Amazon Elastic Kubernetes Service}
}

@misc{AWS_CHALICE,
	howpublished = {\url{https://aws.github.io/chalice/}},
	note = {Accessed: 2021-02-28},
	title = {Chalice - A framework for writing serverless applications}
}

@misc{JENKINS_ANOUNCEMENT,
	howpublished = {\url{https://blog.dandyer.co.uk/2008/05/09/why-are-you-still-not-using-hudson/}},
	note = {Accessed: 2021-02-02},
	title = {Why are you still not using Hudson}
}

@misc{JENKINS_AWARDS,
	howpublished = {\url{https://www.jenkins.io/awards/}},
	note = {Accessed: 2021-02-02},
	title = {Awards}
}

@misc{JENKINS_JENKINSFILE,
	howpublished = {\url{https://www.jenkins.io/doc/book/pipeline/syntax/}},
	note = {Accessed: 2021-02-13},
	title = {Pipeline Syntax}
}

@misc{TRAVIS_HOMEPAGE,
	howpublished = {\url{https://travis-ci.org/}},
	note = {Accessed: 2021-02-03},
	title = {Test and Deploy with Confidence}
}

@misc{TRAVIS_BILLING,
	howpublished = {\url{https://blog.travis-ci.com/2020-11-02-travis-ci-new-billing}},
	note = {Accessed: 2021-02-04},
	title = {The new pricing model for travis-ci.com}
}

@misc{TRAVIS_PLANS,
	howpublished = {\url{https://travis-ci.com/plans}},
	note = {Accessed: 2021-02-04},
	title = {Built for every team}
}

@misc{TRAVIS_ENTERPRISE,
	howpublished = {\url{https://enterprise.travis-ci.com/Travis.CI.Enterprise.Information.Sheet.pdf}},
	note = {Accessed: 2021-02-04},
	title = {Travis CI Enterprise}
}


@misc{CRUNCHBASE_TRAVIS_CI,
	howpublished = {\url{https://www.crunchbase.com/organization/travis-ci}},
	note = {Accessed: 2021-02-03},
	title = {Travis CI}
}

@misc{CRUNCHBASE_CIRCLE_CI,
	howpublished = {\url{https://www.crunchbase.com/organization/circle-ci}},
	note = {Accessed: 2021-02-03},
	title = {Circle CI}
}

@misc{CIRCLE_EXECUTORS,
	howpublished = {\url{https://circleci.com/docs/2.0/executor-types/}},
	note = {Accessed: 2021-02-13},
	title = {Choosing an Executor Type}
}

@misc{CIRCLE_CONFIG,
	howpublished = {\url{https://circleci.com/docs/2.0/config-intro/\#section=configuration}},
	note = {Accessed: 2021-02-13},
	title = {Configuration Introduction}
}

@misc{CIRCLE_ORBS,
	howpublished = {\url{https://circleci.com/docs/2.0/orb-intro/}},
	note = {Accessed: 2021-02-14},
	title = {Orbs Introduction}
}

@misc{CIRCLE_ORBS_AWS_CLI,
	howpublished = {\url{https://circleci.com/developer/orbs/orb/circleci/aws-cli}},
	note = {Accessed: 2021-02-28},
	title = {Orbs AWS CLI}
}

@misc{CIRCLE_ORBS_AWS_ECR,
	howpublished = {\url{https://circleci.com/developer/orbs/orb/circleci/aws-ecr}},
	note = {Accessed: 2021-02-28},
	title = {Orbs AWS ECR}
}


@misc{CIRCLE_PRICING,
	howpublished = {\url{https://circleci.com/pricing/}},
	note = {Accessed: 2021-02-14},
	title = {Build fast. Start for free.}
}

@misc{CIRCLE_ORBS_JOBS_STEPS_WORKFLOWS,
	howpublished = {\url{https://circleci.com/docs/2.0/jobs-steps/}},
	note = {Accessed: 2021-02-28},
	title = {Orbs, Jobs, Steps, and Workflows}
}

@misc{CIRCLE_EXECUTORS_INTRO,
	howpublished = {\url{https://circleci.com/docs/2.0/executor-intro/}},
	note = {Accessed: 2021-02-28},
	title = {Executors and Images}
}



@misc{CLOUDBEES,
	howpublished = {\url{https://www.cloudbees.com/press/cloudbees-acquires-saas-continuous-integration-and-continuous-delivery-leader-codeship}},
	note = {Accessed: 2021-02-04},
	title = {CloudBees Acquires SaaS Continuous Integration and Continuous Delivery Leader Codeship}
}

@misc{AZURE_DEVOPS_INTRO,
	howpublished = {\url{https://azure.microsoft.com/en-us/blog/introducing-azure-devops/}},
	note = {Accessed: 2021-02-04},
	title = {Introducing Azure DevOps}
}

@misc{AZURE_OFFICE_PLANS,
	howpublished = {\url{https://www.microsoft.com/en-ww/microsoft-365/buy/compare-all-microsoft-365-products?tab=1\&market=af}},
	note = {Accessed: 2021-02-21},
	title = {Office 365 - Find the right solution for you}
}

@misc{AZURE_REVENUE,
	howpublished = {\url{https://www.statista.com/statistics/273482/segment-revenue-of-microsoft/}},
	note = {Accessed: 2021-02-21},
	title = {Microsoft's revenue from 2012 to 2020 financial years, by segment}
}

@misc{AZURE_REGIONS_AND_AZS,
	howpublished = {\url{https://docs.microsoft.com/en-us/azure/availability-zones/az-overview}},
	note = {Accessed: 2021-02-21},
	title = {Regions and Availability Zones in Azure}
}

@misc{AZURE_VIRTUAL_MACHINES,
	howpublished = {\url{https://azure.microsoft.com/en-us/services/virtual-machines/}},
	note = {Accessed: 2021-02-21},
	title = {Virtual Machines}
}

@misc{AZURE_AD,
	howpublished = {\url{https://azure.microsoft.com/en-us/services/active-directory/}},
	note = {Accessed: 2021-02-21},
	title = {Azure Active Directory}
}

@misc{AZURE_CONTAINER_REGISTRY,
	howpublished = {\url{https://azure.microsoft.com/en-us/services/container-registry/}},
	note = {Accessed: 2021-02-21},
	title = {Container Registry}
}

@misc{AZURE_APPLICATION_GATEWAY,
	howpublished = {\url{https://azure.microsoft.com/en-us/services/application-gateway/}},
	note = {Accessed: 2021-02-21},
	title = {Application Gateway}
}

@misc{AZURE_LOAD_BALANCER,
	howpublished = {\url{https://azure.microsoft.com/en-us/services/load-balancer/}},
	note = {Accessed: 2021-02-21},
	title = {Load-Balancer}
}

@misc{AZURE_VIRTUAL_NETWORK,
	howpublished = {\url{https://azure.microsoft.com/en-us/services/virtual-network/}},
	note = {Accessed: 2021-02-21},
	title = {Virtual Network}
}

@misc{AZURE_KUBERNETES,
	howpublished = {\url{https://azure.microsoft.com/en-us/services/kubernetes-service/}},
	note = {Accessed: 2021-02-21},
	title = {Azure Kubernetes Service (AKS)}
}

@misc{ANSIBLE_OVERVIEW,
	howpublished = {\url{https://www.ansible.com/overview/it-automation}},
	note = {Accessed: 2021-02-14},
	title = {Why Ansible}
}

@misc{ANSIBLE_PRODUCTS,
	howpublished = {\url{https://www.ansible.com/products/automation-platform}},
	note = {Accessed: 2021-02-14},
	title = {Red Hat Ansible Automation Platform}
}

@misc{CHEF_ANNOUNCEMENT,
	howpublished = {\url{https://blog.chef.io/announcing-chef}},
	note = {Accessed: 2021-02-14},
	title = {Announcing Chef}
}

@misc{CHEF_PROGRESS,
	howpublished = {\url{http://www.globenewswire.com/news-release/2020/09/08/2089870/0/en/Progress-Announces-Acquisition-of-Chef.html}},
	note = {Accessed: 2021-02-14},
	title = {Progress Announces Acquisition of Chef}
}

@misc{CHEF_PRODUCTS,
	howpublished = {\url{https://www.chef.io/products}},
	note = {Accessed: 2021-02-14},
	title = {Chef Enterprise Automation Stack}
}

@misc{PUPPET_OVERVIEW,
	howpublished = {\url{https://puppet.com/try-puppet/}},
	note = {Accessed: 2021-02-14},
	title = {Try Puppet}
}

@misc{HASHICORP_VAGRANT,
	howpublished = {\url{https://www.vagrantup.com/}},
	note = {Accessed: 2021-02-18},
	title = {Vagrant - Development Environments Made Easy}
}

@misc{HASHICORP_PACKER,
	howpublished = {\url{https://www.packer.io/}},
	note = {Accessed: 2021-02-18},
	title = {Packer - Build Automated Machine Images}
}

@misc{HASHICORP_TERRAFORM,
	howpublished = {\url{https://www.packer.io/}},
	note = {Accessed: 2021-02-18},
	title = {Packer - Build Automated Machine Images}
}

@misc{TERRAFORM_STATE,
	howpublished = {\url{https://www.terraform.io/docs/language/state/index.html}},
	note = {Accessed: 2021-02-24},
	title = {State}
}

@misc{TERRAFORM_BACKENDS,
	howpublished = {\url{https://www.terraform.io/docs/language/settings/backends/index.html}},
	note = {Accessed: 2021-02-24},
	title = {Backends}
}

@misc{TERRAFORM_WORKSPACES,
	howpublished = {\url{https://www.terraform.io/docs/language/state/workspaces.html}},
	note = {Accessed: 2021-02-25},
	title = {Workspaces}
}

@misc{TERRAFORM_VARIABLES,
	howpublished = {\url{https://www.terraform.io/docs/language/values/variables.html}},
	note = {Accessed: 2021-02-25},
	title = {Input Variables}
}

@misc{TERRAFORM_RUN,
	howpublished = {\url{https://www.terraform.io/docs/cli/run/index.html}},
	note = {Accessed: 2021-02-25},
	title = {Provisioning Infrastructure with Terraform}
}

@misc{TERRAFORM_PLAN,
	howpublished = {\url{https://www.terraform.io/docs/cli/commands/plan.html}},
	note = {Accessed: 2021-02-25},
	title = {Command: plan}
}

@misc{TERRAFORM_APPLY,
	howpublished = {\url{https://www.terraform.io/docs/cli/commands/apply.html}},
	note = {Accessed: 2021-02-25},
	title = {Command: apply}
}

@misc{TERRAFORM_DESTROY,
	howpublished = {\url{https://www.terraform.io/docs/cli/commands/destroy.html}},
	note = {Accessed: 2021-02-25},
	title = {Command: destroy}
}

@misc{HASHICORP_VAULT,
	howpublished = {\url{https://www.vaultproject.io/}},
	note = {Accessed: 2021-02-18},
	title = {Vault - Manage Secrets and Protect Sensitive Data}
}

@misc{HASHICORP_CONSUL,
	howpublished = {\url{https://www.consul.io/}},
	note = {Accessed: 2021-02-18},
	title = {Consul - Service Networking Across Any Cloud}
}

@misc{HASHICORP_NOMAD,
	howpublished = {\url{https://www.nomadproject.io/}},
	note = {Accessed: 2021-02-18},
	title = {Nomad - Workload Orchestration Made Easy}
}

@misc{HASHICORP_BOUNDARY,
	howpublished = {\url{https://www.boundaryproject.io/}},
	note = {Accessed: 2021-02-18},
	title = {Boundary - Simple and secure remote access}
}

@misc{HASHICORP_WAYPOINT,
	howpublished = {\url{https://www.waypointproject.io/}},
	note = {Accessed: 2021-02-18},
	title = {Waypoint - Build. Deploy. Release.}
}

@misc{GCP_WHY,
	howpublished = {\url{https://cloud.google.com/why-google-cloud}},
	note = {Accessed: 2021-02-21},
	title = {Warum Google Cloud?}
}

@misc{GCP_PRODUCTS,
	howpublished = {\url{https://cloud.google.com/products/}},
	note = {Accessed: 2021-02-21},
	title = {Google Cloud products}
}

@misc{GCP_REVENUE,
	howpublished = {\url{https://www.statista.com/statistics/478176/google-public-cloud-revenue/}},
	note = {Accessed: 2021-02-21},
	title = {Global Google Cloud revenues from 2017 to 2020}
}

@misc{GCP_REGIONS_AND_ZONES,
	howpublished = {\url{https://cloud.google.com/compute/docs/regions-zones}},
	note = {Accessed: 2021-02-23},
	title = {Regions and zones}
}

@misc{GCP_COMPUTE,
	howpublished = {\url{https://cloud.google.com/compute}},
	note = {Accessed: 2021-02-23},
	title = {Compute Engine}
}

@misc{GCP_IAM,
	howpublished = {\url{https://cloud.google.com/iam}},
	note = {Accessed: 2021-02-23},
	title = {Cloud Identity and Access Management (IAM)}
}

@misc{GCP_REGISTRY,
	howpublished = {\url{https://cloud.google.com/container-registry}},
	note = {Accessed: 2021-02-23},
	title = {Container Registry}
}

@misc{GCP_LB,
	howpublished = {\url{https://cloud.google.com/load-balancing}},
	note = {Accessed: 2021-02-23},
	title = {Cloud Load Balancing}
}

@misc{GCP_VPC,
	howpublished = {\url{https://cloud.google.com/vpc}},
	note = {Accessed: 2021-02-23},
	title = {Virtual Private Cloud (VPC)}
}




















