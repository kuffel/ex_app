version: 2.1

orbs:
  aws-cli: circleci/aws-cli@1.3.0
  aws-ecr: circleci/aws-ecr@6.12.2

executors:
  docker-executor:
      docker:
        - image: circleci/elixir:1.10
          environment:
            MIX_ENV: test
  machine-executor:
      machine:
        image: circleci/classic:201808-01

commands:
  setup_elixir:
    steps:
      - run:
          name: Setup Rebar and Hex
          command: mix local.hex --force && mix local.rebar --force
      - restore_cache:
          key: deps-cache-{{ checksum "mix.lock" }}
      - run:
          name: Compile dependencies
          command: mix do deps.get, deps.compile
      - save_cache:
          key: deps-cache-{{ checksum "mix.lock" }}
          paths:
            - deps
            - ~/.mix
            - _build

  setup_terraform:
    steps:
      - run:
          name: Install terraform
          command: |
            wget https://releases.hashicorp.com/terraform/0.13.5/terraform_0.13.5_linux_amd64.zip
            sudo unzip terraform_0.13.5_linux_amd64.zip -d /opt/
            sudo chmod +x /opt/terraform
            sudo ln /opt/terraform /usr/bin/terraform


jobs:
  check_code:
    executor: docker-executor
    steps:
      - checkout
      - setup_elixir
      - run:
          name: Check formatting
          command: mix format --check-formatted
      - run:
          name: Static code analysis
          command: mix credo

  build:
    executor: docker-executor
    steps:
      - checkout
      - setup_elixir
      - run:
          name: Compile application
          command: mix compile --force --warnings-as-errors

  test:
    executor: docker-executor
    steps:
      - checkout
      - setup_elixir
      - run:
          name: Unit tests
          command: mix coveralls.html --trace
      - store_artifacts:
          path: cover
          destination: coverage_results
      - store_test_results:
          path: _build/test/lib/ex_app

  documentation:
    executor: docker-executor
    steps:
      - checkout
      - setup_elixir
      - run:
          name: Build documentation
          command: mix docs
      - run:
          name: ZIP documentation
          command: zip -r documentation.zip doc
      - store_artifacts:
          path: documentation.zip
      - store_artifacts:
          path: doc

  docker:
    executor: machine-executor
    steps:
      - checkout
      - aws-cli/setup
      - aws-ecr/ecr-login
      - run:
          name: Update version
          command: ./version.sh
      - run:
          name: Build docker image
          command: make docker
      - run:
          name: Push docker image
          command: |
            VERSION=`cat ./VERSION`
            GIT_HASH=`git log --pretty=format:'%h' -n 1`
            DOCKER_TAG=${VERSION}-${GIT_HASH}
            docker tag kuffel/ex_app:${DOCKER_TAG} 418124467834.dkr.ecr.eu-central-1.amazonaws.com/kuffel/ex_app:${DOCKER_TAG}
            docker push 418124467834.dkr.ecr.eu-central-1.amazonaws.com/kuffel/ex_app:${DOCKER_TAG}

  deploy_preview:
    executor: machine-executor
    steps:
      - checkout
      - aws-cli/setup
      - setup_terraform
      - run:
          name: terraform init and validate
          command: |
            cd deployments
            terraform init -input=false
            terraform workspace new preview_${CIRCLE_PULL_REQUEST##*/} || true
            terraform workspace select preview_${CIRCLE_PULL_REQUEST##*/}
            terraform validate
      - run:
          name: terraform deploy
          command: |
            cd deployments
            VERSION=`cat ../VERSION`
            GIT_HASH=`git log --pretty=format:'%h' -n 1`
            DOCKER_TAG=${VERSION}-${GIT_HASH}
            terraform apply -auto-approve -var="deployment_name=ex-app-preview-${CIRCLE_PULL_REQUEST##*/}" -var="docker_tag=${DOCKER_TAG}"
      - run:
          name: wait for deployment
          command: |
            cd deployments/scripts
            GIT_HASH=`git log --pretty=format:'%h' -n 1`
            ./wait_for_deployment.sh https://ex-app-preview-${CIRCLE_PULL_REQUEST##*/}.kuffel.me ${GIT_HASH}
            COMMENT="Preview environment deployed at: https://ex-app-preview-${CIRCLE_PULL_REQUEST##*/}.kuffel.me"
            ./add_pr_comment.sh ${CIRCLE_PULL_REQUEST##*/} "${COMMENT}" ${GITHUB_ACCESS_TOKEN}

  remove_preview_deployments:
    executor: machine-executor
    steps:
      - checkout
      - aws-cli/setup
      - setup_terraform
      - run:
          name: terraform init and validate
          command: |
            cd deployments
            terraform init -input=false
            terraform validate
      - run:
          name: Remove preview environments
          command: |
            cd deployments/scripts
            UNUSED_WORKSPACES=($(./get_unused_workspaces.sh ${GITHUB_ACCESS_TOKEN} | jq -r ".[]"))

            cd ..
            for w in "${UNUSED_WORKSPACES[@]}"
            do
              echo "Clearing workspace ${w}:"
              terraform workspace select ${w}
              terraform destroy -auto-approve
              terraform workspace select default
              terraform workspace delete ${w}
            done


  deploy_production:
    executor: machine-executor
    steps:
      - checkout
      - aws-cli/setup
      - setup_terraform
      - run:
          name: terraform init and validate
          command: |
            cd deployments
            terraform init -input=false
            terraform workspace select production
            terraform validate
      - run:
          name: terraform deploy
          command: |
            cd deployments
            VERSION=`cat ../VERSION`
            GIT_HASH=`git log --pretty=format:'%h' -n 1`
            DOCKER_TAG=${VERSION}-${GIT_HASH}
            terraform apply -auto-approve -var="docker_tag=${DOCKER_TAG}"
      - run:
          name: wait for deployment
          command: |
            cd deployments/scripts
            GIT_HASH=`git log --pretty=format:'%h' -n 1`
            ./wait_for_deployment.sh https://ex-app.kuffel.me ${GIT_HASH}
      - run:
          name: remove unused images
          command: |
            cd deployments/scripts
            ./cleanup_images.sh ${GITHUB_ACCESS_TOKEN}

workflows:
  version: 2
  builds:
      jobs:
        - check_code
        - build:
            requires:
              - check_code
        - test:
            requires:
              - build
        - documentation:
            requires:
              - check_code
              - build
        - docker:
            requires:
              - test
        - deploy_preview:
            requires:
              - docker
            filters:
              branches:
                ignore:
                  - master
        - remove_preview_deployments:
            filters:
               branches:
                 only:
                   - master
        - deploy_production:
            requires:
              - docker
            filters:
                branches:
                  only:
                    - master